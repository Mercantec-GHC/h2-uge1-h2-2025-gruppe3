@page "/quiz"
@inject HttpClient Http
@inject BlazorWASM.Services.APIService ApiService
@using System.Text.Json;
@using System.Diagnostics.CodeAnalysis;
@using System.Net;

<div style="margin:50px auto; padding:0px; width:60%;">

@* Tjekker om der modtages data fra API-kaldet *@
 @if (data == null)
{
    <div class="text-center row align-items-center vh-100">
        <div class="w-100">
            <div class="spinner-border" role="status" style="height:50px !important; width:50px !important;">
                <span class="visually-hidden col">Loading...</span>
            </div>
        </div>
    </div>
}
@* Hvis boolen er sand afgøres det at quizzen stadigvæk er i gang indtil bool er falskt *@
else if (activeQuiz)
{
    var item = data[currentCount];

    <h3>Quiz</h3>

    <p role="status" style="float:right; margin:0px,0px,0px,15px;">
        @questionCount/@dataTotal
    </p>

    <p style="height:40px; margin-top:50px;">
        <b>
            Question:
        </b>
        @item.question
        </p>
    <p>
        <b>
            Category:
        </b>
        @item.category
    </p>
    <p>
        <b>
            Difficulty:
        </b>
        @item.difficulty
    </p>

        @for (int i = 0; i < all_answers.Length; i++)
        {
            int button_number = i;
            var answer = all_answers[button_number];

            <button class="btn btn-@(color_array[button_number]) w-50 border border-secondary" style="height:75px;"
                    disabled="@selected"
                    @onclick="() => ChangeColor(button_number, answer, data[currentCount].correct_answer)">
                @answer
            </button>
        }

        <button class="btn btn-primary float-end" style="margin-top:15px;" @onclick="NextQuestion" disabled="@(!selected)">
        Next Question
    </button>
}
else
{
    <h3>Quiz completed</h3>

    <p role="status">
        <b>
            Correct answers:
        </b>
        @correctCount/@dataTotal
    </p>
    <button class="btn btn-primary float-end" style="margin-top:15px;" @onclick="ResetQuiz">
        Reset
    </button>
}
</div>

@code {
    private List<Result>? data;

    private string[] all_answers = Array.Empty<string>();
    private string[] color_array = Array.Empty<string>();

    private string navigate_button_text = "Next Question";

    private bool activeQuiz = true;
    private bool selected = false;

    private int dataTotal = 0;
    private int currentCount = 0;
    private int questionCount = 1;
    private int correctCount = 0;

    private async Task ResetQuiz()
    {
        // Nulstil quiz
        currentCount = 0;
        questionCount = 1;
        correctCount = 0;
        selected = false;
        activeQuiz = true;
        navigate_button_text = "Next Question";

        await LoadQuizDataAsync();
    }

    // Metoden bliver kørt som standard af Blazor, når siden indlæses
    protected override async Task OnInitializedAsync()
    {
        await LoadQuizDataAsync();
    }

    // Metoden for at indlæse quiz forefra
    private async Task LoadQuizDataAsync()
    {
        // API-kald for at hente data med en GET-operation
        var root = await Http.GetFromJsonAsync<Root>("https://opentdb.com/api.php?amount=30");
        if (root != null)
        {
            data = root.results;

            // Decode special karakterer til HTML-visningen
            foreach (var item in data)
            {
                item.question = WebUtility.HtmlDecode(item.question);
                item.correct_answer = WebUtility.HtmlDecode(item.correct_answer);
                item.category = WebUtility.HtmlDecode(item.category);

                for (int i = 0; i < item.incorrect_answers.Count; i++)
                {
                    item.incorrect_answers[i] = WebUtility.HtmlDecode(item.incorrect_answers[i]);
                }
            }

            // Tæller entry i listen result
            dataTotal = data.Count;

            LoadQuestion();
        }
    }

    // Metoden indlæser alle spørgsmål
    private void LoadQuestion()
    {
        if (data == null)
            return;

        // Ved spørgsmål 30 bliver "Næste spærgsmål" knappens tekst lavet om 
        if (currentCount + 1 == dataTotal)
        {
            navigate_button_text = "Show quiz results";
        }

        // henter kun data for det indeks-tal, der er nået til i quizzen
        var item = data[currentCount];

        // Tilføjer strengen "correct_answer" til listen "incorrect_answers", så den står først i listen
        // Konvertere hele listen til et array
        all_answers = item.incorrect_answers.Append(item.correct_answer).ToArray();

        //  Afgør om svarmulighederne er af typen "multiple" eller ikke
        if (item.type == "multiple")
        {
            // Bland alle svar
            Random.Shared.Shuffle(all_answers);
        }
        else
        {
            // Sorterer alfabetisk
            Array.Sort(all_answers);

            // Sorterer omvendt
            Array.Reverse(all_answers);
        }

        // Opretter et tomt array med samme antal tomme strenge som antallet af spørgsmål
        color_array = new string[all_answers.Length];

        // Tilføjer tekst til hver af de tomme array strenge
        for (int i = 0; i < all_answers.Length; i++)
        {
            color_array[i] = "light";
        }

        selected = false;
    }

    private void ChangeColor(int clickedIndex, string clickedAnswer, string correctAnswer)
    {
        //  Tjekker om det klikkede svar er det samme som det korrekt svar
        if (clickedAnswer == correctAnswer)
        {
            // Korrekt svar valgt
            color_array[clickedIndex] = "success";

            // Tæl antal korrekte svar
            correctCount++;
        }
        else
        {
            // Forkert svar valgt
            color_array[clickedIndex] = "danger";

            // Find korrekt index manuelt
            for (int i = 0; i < all_answers.Length; i++)
            {
                int button_number = i;
                if (all_answers[button_number] == correctAnswer)
                {
                    // Viser korrekte svar´s indeks-tal
                    color_array[button_number] = "success";
                    break;
                }
            }

        }
        selected = true;
    }

    private void NextQuestion()
    {
        if (data == null)
            return;

        // Afslut quiz
        if (currentCount + 1 >= dataTotal)
        {
            activeQuiz = false;
            return;
        }

        // Tæl hvilket nummer spørgsmål der er nået til
        currentCount++;
        questionCount = currentCount + 1;

        LoadQuestion();
    }
}
